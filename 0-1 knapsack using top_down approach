class Solution
{
    public:
    // 
   
    int knapSack(int cap, int wt[], int price[], int n) 
    { 
         int dp[1001][1001];
        for(int i=0;i<n+1;i++)  // i representing n and j representing capacity
        {
            for(int j=0;j<cap+1;j++)
            {
                if(i==0||j==0)         //base case
                    dp[i][j] = 0;
            }
        }
        for(int i=1;i<n+1;i++)  
        {
            for(int j=1;j<cap+1;j++)
            {
                if(wt[i-1]<=j) // wt index start's with 0 that's why we using i-1;
                {
                    int take  = price[i-1]+dp[i-1][j-wt[i-1]]; // current wt price + last wt price
                    int not_take = dp[i-1][j]; // don't take so put last wt;
                    dp[i][j] = max(take, not_take);  // which giving max take or not take
                } 
                else if(wt[i-1]>j)
                {
                    int check_for_next = dp[i-1][j]; // leave it if cap< current wt
                    dp[i][j] = check_for_next;
                }
            }
        }
        return dp[n][cap];
    }
};
